#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
  do \
    { \
    /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
    *yy_cp = yyg->yy_hold_char; \
    YY_RESTORE_YY_MORE_OFFSET \
    yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
  while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
  {
/* %if-c-only */
  FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

  char *yy_ch_buf;    /* input buffer */
  char *yy_buf_pos;    /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  int yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2

  };
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
  { \
  if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
    YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
  } \
  YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }
#define yy_set_bol(at_bol) \
  { \
  if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
    YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
  } \
  YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
  }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
  yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
  yyleng = (int) (yy_cp - yy_bp); \
  yyg->yy_hold_char = *yy_cp; \
  *yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
  yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
  {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
  };
static const flex_int16_t yy_accept[201] =
    {   0,
        0,    0,   53,   51,    1,    2,   51,   51,   17,   51,
        9,   10,    7,    6,   16,    5,   51,    8,   43,   47,
       15,   47,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   11,
       12,   13,   14,    1,    2,   47,    0,    4,    3,   43,
        0,   43,    0,    0,   42,   42,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       30,   50,   50,   50,   50,   50,   50,   50,   33,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   38,
       50,   50,   50,    3,   42,   42,   45,   18,   50,   20,

       50,   50,   50,   50,   50,   27,   50,   50,   29,   48,
       50,   46,   46,   46,   50,   50,   32,   50,   46,   50,
       50,   50,   50,   50,   45,   50,   50,   50,   50,   50,
       50,   50,   19,   50,   50,   50,   50,   50,   25,   28,
       50,   50,   45,   31,   50,   49,   50,   50,   50,   50,
       45,   50,   36,   37,   44,   50,   40,   41,   50,   21,
       50,   50,   24,   50,   45,   50,   34,   50,   35,   50,
       44,   50,   50,   50,   50,   50,   26,   46,   46,   50,
       50,   50,   45,   50,   50,   50,   50,   39,   50,   23,
       50,   50,   22,   50,   50,   50,   50,   44,   44,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    1,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,    1,    1,   28,
       29,   30,    1,    1,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   41,   42,   43,   44,   45,
       40,   46,   47,   48,   49,   40,   50,   51,   40,   40,
       52,    1,   53,    1,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   40,   40,   64,   65,   66,
       67,   68,   40,   69,   70,   71,   72,   40,   73,   74,
       40,   40,   75,    1,   76,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1
    } ;

static const flex_int16_t yy_base[204] =
    {   0,
        0,    0,  145,  924,   75,  141,  110,  124,  924,  122,
      924,  924,  924,  924,  924,  924,   62,  924,   74,   96,
       95,   83,   95,  155,   88,   69,   90,   93,   96,  156,
      128,  176,  179,  178,  182,  198,  225,  230,  203,  924,
      924,  924,  924,  103,  106,  924,  102,  924,    0,  282,
      292,  304,  317,   87,  133,  135,  151,  228,  338,  229,
      210,  191,  339,  340,  341,  342,  343,  352,  181,  353,
      193,  404,  355,  369,  371,  375,  381,  388,  194,  398,
      403,  354,  432,  433,  435,  445,  455,  449,  451,  197,
      434,  456,  472,    0,  924,   73,  252,  255,  474,  264,

      476,  489,  487,  494,  498,  270,  508,  517,  271,  274,
      519,  275,  276,  356,  514,  521,  357,  552,  530,  540,
      535,  545,  574,  575,  580,  581,  584,  585,  587,  594,
      590,  596,  600,  601,  610,  619,  605,  606,  630,  617,
      642,  656,  651,  658,  665,  668,  669,  670,  674,  675,
      679,  680,  684,  685,  690,  694,  691,  695,  700,  697,
      714,  711,  712,  723,  717,  726,  727,  742,  741,  743,
      745,  746,  757,  758,  755,  761,  767,  772,  774,  778,
      779,  784,  789,  790,  793,  791,  794,  805,  806,  807,
      808,  829,  831,  836,  840,  841,  847,  850,  852,  924,

      917,   75,  920
    } ;

static const flex_int16_t yy_def[204] =
    {   0,
      200,    1,  200,  200,  200,  200,  200,  201,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  202,  202,   24,   24,   24,   24,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  200,
      200,  200,  200,  200,  200,  200,  201,  200,  203,  200,
      200,  200,  200,  200,  202,  202,  202,   24,  202,  202,
       24,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  203,  200,  200,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,    0,

      200,  200,  200
    } ;

static const flex_int16_t yy_nxt[1001] =
    {   0,
        4,    5,    6,    5,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   24,   29,   30,   29,
       31,   32,   33,   34,   35,   36,   37,   38,   29,   39,
       29,   40,   41,    4,   23,   24,   25,   26,   27,   28,
       24,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   29,   39,   29,   42,   43,   44,   57,   44,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   51,
       95,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   53,  200,   65,   44,   95,   44,   48,   45,   54,
      200,   46,   55,   56,   55,   55,   55,   55,   55,   55,
       55,   55,   62,   46,   46,   49,   58,   65,   63,   48,
       66,   64,   67,   69,  200,   59,   70,   60,   46,  200,
       68,  200,  200,   45,  200,  200,   62,  200,  200,  200,
       58,   63,   55,   66,   64,   67,   69,  200,   59,   70,
       60,   53,  200,   68,  200,  200,  200,  200,  200,   54,
      200,   73,   55,   56,   55,   55,   55,   55,   55,   55,
       55,   55,  200,  200,  200,  200,   61,  200,  200,  200,
      200,   71,  200,  200,   73,  200,  200,  200,   72,  200,

      200,  200,  200,  200,  200,  200,   74,  200,  200,  200,
       61,  200,  200,   77,   75,   71,  200,  200,  200,   76,
      200,   72,   78,   79,  108,   81,   80,   82,   83,  101,
       74,  200,   84,   92,  200,  200,  200,   77,   75,  200,
       93,   57,   76,  200,  200,   78,   79,  108,   81,   80,
       82,  200,   83,  101,  200,   85,   84,   92,  200,   57,
      200,  200,  100,   86,   93,   57,  200,   88,   89,  200,
      200,  200,   87,   90,   97,   91,  200,  200,  200,   85,
      200,  200,  200,   57,  200,  200,  100,   86,  200,  200,
      200,   88,   89,  200,  200,   87,   90,   97,   91,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   51,
      200,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   54,  200,  200,   95,   96,   95,   95,   95,   95,
       95,   95,   95,   95,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  104,  102,  200,  200,  106,  200,   98,  200,
      200,  200,  103,  200,   99,  200,  200,  200,  105,  200,
      107,  111,  120,  200,  200,  200,  104,  102,  109,  200,

      106,   98,  200,  200,  200,  103,  200,   99,  114,  200,
      200,  105,  200,  113,  107,  111,  120,  200,  200,  112,
      200,  109,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  115,  114,  116,  200,  117,  113,  200,  200,  200,
      200,  200,  112,  200,  200,  118,  200,  200,  200,  200,
      200,  200,  119,  200,  115,  200,  116,  200,  117,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  118,  200,
      200,  200,  130,  200,  121,  119,  123,  200,  200,  122,
      200,  124,  200,  128,  200,  126,  200,  125,  200,  127,
      200,  200,  129,  200,  131,  200,  130,  121,  200,  123,

      200,  200,  122,  200,  200,  124,  132,  128,  200,  126,
      125,  200,  200,  127,  200,  129,  134,  133,  131,  135,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  136,
      132,  200,  139,  200,  137,  200,  200,  142,   97,  134,
      133,  200,  138,  135,  200,  200,  200,  200,  200,  200,
      200,  200,  136,  143,  200,  140,  139,  137,  200,  200,
      141,  144,  145,  200,  200,  138,  200,  200,  148,  200,
      146,  146,  146,  146,  146,  146,  200,  143,  140,  149,
      200,  200,  147,  141,  144,  145,  200,  200,  200,  200,
      200,  200,  148,  200,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  149,  200,  147,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  151,  150,  200,
      200,  155,  200,  200,  200,  200,  152,  154,  153,  200,
      156,  200,  200,  200,  200,  200,  200,  157,  158,  159,
      151,  150,  163,  162,  200,  155,  200,  200,  200,  152,
      154,  153,  200,  161,  156,  160,  200,  200,  200,  200,
      157,  158,  200,  159,  200,  200,  163,  162,  164,  200,
      200,  200,  200,   97,  200,  200,  200,  161,  160,  200,
      200,  200,  200,  200,  200,  200,  200,  165,  200,  200,
      200,  200,  164,  200,  200,  166,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      165,  200,  200,  168,  200,  170,  167,  200,  200,  166,
      200,  169,  200,  200,  200,  200,  200,  171,  200,  200,
      173,  200,  200,  200,  200,  200,  168,  200,  170,  167,
      200,  200,  174,  172,  169,  200,  175,  200,  200,  200,
      171,  200,  200,  176,  173,  200,  200,  200,  177,  200,
      200,  200,  200,  200,  200,  174,  178,  200,  200,  200,
      175,  200,  200,  200,  200,  200,  176,  180,  200,  200,
      200,  200,  177,  179,  200,  200,  200,  181,  200,  178,
      200,  182,  200,  200,  183,  200,  200,  200,  200,  200,

      200,  180,  184,  200,  200,  200,  179,  200,  200,  185,
      181,  200,  200,  200,  200,  182,  200,  187,  183,  200,
      200,  200,  200,  200,  189,  184,  200,  190,  200,  188,
      200,  186,  185,  200,  192,  200,  191,  200,  194,  193,
      200,  187,  200,  200,  200,  200,  200,  200,  189,  200,
      200,  190,  188,  200,  200,  200,  200,  192,  200,  191,
      200,  200,  194,  193,  200,  200,  200,  200,  200,  195,
      200,  200,  200,  200,  200,  198,  200,  200,  197,  200,
      200,  200,  200,  196,  200,  200,  200,  200,  200,  200,
      200,  200,  195,  199,  200,  200,  200,  200,  200,  198,

      200,  200,  197,  200,  200,  200,  196,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  199,   47,   47,   47,
       94,  200,   94,    3,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200

    } ;

static const flex_int16_t yy_chk[1001] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,  202,    5,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       96,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   23,   29,   26,   44,   54,   44,   47,   45,   23,
       29,   22,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   25,   21,   20,   10,   23,   26,   25,    8,
       27,   25,   27,   28,   31,   23,   28,   23,    7,   55,
       27,   56,   31,    6,    3,    0,   25,   55,    0,   56,
       23,   25,   56,   27,   25,   27,   28,   57,   23,   28,
       23,   24,   30,   27,    0,   57,    0,    0,    0,   24,
       30,   31,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   32,    0,   34,   33,   24,   69,   35,    0,
       32,   30,   34,   33,   31,   69,   35,   62,   30,   71,

       79,    0,    0,   90,   36,   62,   32,   71,   79,   39,
       24,   90,   36,   33,   32,   30,   61,   39,    0,   32,
        0,   30,   33,   34,   69,   35,   34,   35,   36,   62,
       32,   37,   36,   39,   58,   60,   38,   33,   32,   37,
       39,   61,   32,   60,   38,   33,   34,   69,   35,   34,
       35,    0,   36,   62,    0,   37,   36,   39,   97,   58,
        0,   98,   60,   37,   39,   61,   97,   38,   38,   98,
      100,    0,   37,   38,   58,   38,  106,  109,  100,   37,
      110,  112,  113,   58,  106,  109,   60,   37,  110,  112,
      113,   38,   38,    0,    0,   37,   38,   58,   38,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   52,
        0,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,    0,    0,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   59,   63,   64,   65,   66,   67,
        0,    0,   59,   63,   64,   65,   66,   67,   68,   70,
       82,   73,  114,  117,    0,    0,   68,   70,   82,   73,
      114,  117,   65,   63,    0,   74,   67,   75,   59,    0,
        0,   76,   64,   74,   59,   75,    0,   77,   66,   76,
       68,   73,   82,    0,   78,   77,   65,   63,   70,    0,

       67,   59,   78,    0,   80,   64,    0,   59,   76,   81,
       72,   66,   80,   75,   68,   73,   82,   81,   72,   74,
        0,   70,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   77,   76,   78,    0,   78,   75,    0,   83,   84,
       91,   85,   74,    0,    0,   80,   83,   84,   91,   85,
        0,   86,   81,    0,   77,   88,   78,   89,   78,   86,
        0,   87,   92,   88,    0,   89,    0,    0,   80,   87,
       92,    0,   91,    0,   83,   81,   85,    0,   93,   84,
       99,   86,  101,   88,    0,   87,   93,   86,   99,   87,
      101,    0,   89,  103,   92,  102,   91,   83,    0,   85,

      104,  103,   84,  102,  105,   86,   93,   88,  104,   87,
       86,    0,  105,   87,  107,   89,  101,   99,   92,  102,
      115,    0,  107,  108,    0,  111,    0,  116,  115,  103,
       93,  108,  105,  111,  103,  116,  119,  111,  111,  101,
       99,  121,  104,  102,  119,    0,  120,    0,    0,  121,
        0,  122,  103,  111,  120,  107,  105,  103,  118,  122,
      108,  115,  116,    0,    0,  104,  118,    0,  121,    0,
      118,  118,  118,  118,  118,  118,    0,  111,  107,  122,
      123,  124,  120,  108,  115,  116,  125,  126,  123,  124,
      127,  128,  121,  129,  125,  126,  131,    0,  127,  128,

      130,  129,  132,  122,  131,  120,  133,  134,  130,    0,
      132,  137,  138,    0,  133,  134,  135,  124,  123,  137,
      138,  129,    0,  140,  135,  136,  126,  128,  127,    0,
      130,  140,    0,  136,    0,    0,  139,  131,  132,  134,
      124,  123,  138,  137,  139,  129,    0,    0,  141,  126,
      128,  127,    0,  136,  130,  135,  141,  143,    0,    0,
      131,  132,  142,  134,  144,  143,  138,  137,  139,    0,
      142,  145,  144,  142,  146,  147,  148,  136,  135,  145,
      149,  150,  146,  147,  148,  151,  152,  141,  149,  150,
      153,  154,  139,  151,  152,  145,  155,  157,  153,  154,

      156,  158,    0,  160,  155,  157,  159,    0,  156,  158,
      141,  160,    0,  148,  159,  150,  147,  162,  163,  145,
      161,  149,    0,  165,    0,  162,  163,  152,  161,  164,
      156,  165,  166,  167,    0,    0,  148,  164,  150,  147,
      166,  167,  159,  155,  149,    0,  161,  169,  168,  170,
      152,  171,  172,  162,  156,  169,  168,  170,  164,  171,
      172,  175,    0,  173,  174,  159,  166,  176,    0,  175,
      161,  173,  174,  177,    0,  176,  162,  170,  178,    0,
      179,  177,  164,  168,  180,  181,  178,  172,  179,  166,
      182,  173,  180,  181,  174,  183,  184,  186,  182,  185,

      187,  170,  175,  183,  184,  186,  168,  185,  187,  176,
      172,  188,  189,  190,  191,  173,    0,  181,  174,  188,
      189,  190,  191,    0,  184,  175,    0,  185,    0,  182,
        0,  180,  176,    0,  187,  192,  186,  193,  191,  189,
        0,  181,  194,  192,    0,  193,  195,  196,  184,    0,
      194,  185,  182,  197,  195,  196,  198,  187,  199,  186,
        0,  197,  191,  189,  198,    0,  199,    0,    0,  192,
        0,    0,    0,    0,    0,  196,    0,    0,  195,    0,
        0,    0,    0,  194,    0,    0,    0,    0,    0,    0,
        0,    0,  192,  197,    0,    0,    0,    0,    0,  196,

        0,    0,  195,    0,    0,    0,  194,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  197,  201,  201,  201,
      203,    0,  203,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200

    } ;

static const flex_int16_t yy_rule_linenum[52] =
    {   0,
      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
      162,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.ll"
/* Scanner for BASICally.   -*- C++ -*-

 */
#line 6 "scanner.ll"
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <cstring> // strerror
#include <string>
#include "driver.hh"
#include "parser.hh"

#line 814 "scanner.cc"
/*
  #define YY_DECL yy::Parser::symbol_type yylex(yyscan_t yyscanner, yy::location& loc)
  #define yyterminate() return yy::Parser::make_END(loc)
*/
#line 21 "scanner.ll"
#if defined __clang__
# define CLANG_VERSION (__clang_major__ * 100 + __clang_minor__)
#endif

// Clang and ICC like to pretend they are GCC.
#if defined __GNUC__ && !defined __clang__ && !defined __ICC
# define GCC_VERSION (__GNUC__ * 100 + __GNUC_MINOR__)
#endif

// Pacify warnings in yy_init_buffer (observed with Flex 2.6.4)
// and GCC 6.4.0, 7.3.0 with -O3.
#if defined GCC_VERSION && 600 <= GCC_VERSION
# pragma GCC diagnostic ignored "-Wnull-dereference"
#endif

// This example uses Flex's C back end, yet compiles it as C++.
// So expect warnings about C style casts and NULL.
#if defined CLANG_VERSION && 500 <= CLANG_VERSION
# pragma clang diagnostic ignored "-Wold-style-cast"
# pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
#elif defined GCC_VERSION && 407 <= GCC_VERSION
# pragma GCC diagnostic ignored "-Wold-style-cast"
# pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
#endif

#define FLEX_VERSION (YY_FLEX_MAJOR_VERSION * 100 + YY_FLEX_MINOR_VERSION)

// Old versions of Flex (2.5.35) generate an incomplete documentation comment.
//
//  In file included from src/scan-code-c.c:3:
//  src/scan-code.c:2198:21: error: empty paragraph passed to '@param' command
//        [-Werror,-Wdocumentation]
//   * @param line_number
//     ~~~~~~~~~~~~~~~~~^
//  1 error generated.
#if FLEX_VERSION < 206 && defined CLANG_VERSION
# pragma clang diagnostic ignored "-Wdocumentation"
#endif

// Old versions of Flex (2.5.35) use 'register'.  Warnings introduced in
// GCC 7 and Clang 6.
#if FLEX_VERSION < 206
# if defined CLANG_VERSION && 600 <= CLANG_VERSION
#  pragma clang diagnostic ignored "-Wdeprecated-register"
# elif defined GCC_VERSION && 700 <= GCC_VERSION
#  pragma GCC diagnostic ignored "-Wregister"
# endif
#endif

#if FLEX_VERSION < 206
# if defined CLANG_VERSION
#  pragma clang diagnostic ignored "-Wconversion"
#  pragma clang diagnostic ignored "-Wdocumentation"
#  pragma clang diagnostic ignored "-Wshorten-64-to-32"
#  pragma clang diagnostic ignored "-Wsign-conversion"
# elif defined GCC_VERSION
#  pragma GCC diagnostic ignored "-Wconversion"
#  pragma GCC diagnostic ignored "-Wsign-conversion"
# endif
#endif

// Flex 2.6.4, GCC 9
// warning: useless cast to type 'int' [-Wuseless-cast]
// 1361 |   YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
//      |                                                 ^
#if defined GCC_VERSION && 900 <= GCC_VERSION
# pragma GCC diagnostic ignored "-Wuseless-cast"
#endif
#line 888 "scanner.cc"
#define YY_NO_INPUT 1
#line 94 "scanner.ll"
  // A number symbol corresponding to the value in S.
  yy::Parser::symbol_type
  make_NUMBER (const std::string &s, const yy::Parser::location_type& loc);
#line 894 "scanner.cc"
#line 111 "scanner.ll"
  // Code run each time a pattern is matched.
  #define YY_USER_ACTION  loc.columns (yyleng);
#line 898 "scanner.cc"
#line 899 "scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

      int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
  if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
    { \
    int c = '*'; \
    int n; \
    for ( n = 0; n < max_size && \
           (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
      buf[n] = (char) c; \
    if ( c == '\n' ) \
      buf[n++] = (char) c; \
    if ( c == EOF && ferror( yyin ) ) \
      YY_FATAL_ERROR( "input in flex scanner failed" ); \
    result = n; \
    } \
  else \
    { \
    errno=0; \
    while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
      { \
      if( errno != EINTR) \
        { \
        YY_FATAL_ERROR( "input in flex scanner failed" ); \
        break; \
        } \
      errno=0; \
      clearerr(yyin); \
      } \
    }\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
  YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
  yy_state_type yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  if ( !yyg->yy_init )
    {
    yyg->yy_init = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if ( ! yyg->yy_start )
      yyg->yy_start = 1;  /* first start state */

    if ( ! yyin )
/* %if-c-only */
      yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

    if ( ! yyout )
/* %if-c-only */
      yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

    if ( ! YY_CURRENT_BUFFER ) {
      yyensure_buffer_stack (yyscanner);
      YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
    }

    yy_load_buffer_state( yyscanner );
    }

  {
/* %% [7.0] user's declarations go here */
#line 114 "scanner.ll"


#line 117 "scanner.ll"
  // A handy shortcut to the location held by the driver.
  //yy::location& loc = drv.location;
  // Code run each time yylex is called.
  loc.step ();

#line 1233 "scanner.cc"

  while ( /*CONSTCOND*/1 )    /* loops until end-of-file is reached */
    {
/* %% [8.0] yymore()-related code goes here */
    yy_cp = yyg->yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yyg->yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
    yy_current_state = yyg->yy_start;
yy_match:
    do
      {
      YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
      if ( yy_accept[yy_current_state] )
        {
        yyg->yy_last_accepting_state = yy_current_state;
        yyg->yy_last_accepting_cpos = yy_cp;
        }
      while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 201 )
          yy_c = yy_meta[yy_c];
        }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
      ++yy_cp;
      }
    while ( yy_current_state != 200 );
    yy_cp = yyg->yy_last_accepting_cpos;
    yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
    yy_act = yy_accept[yy_current_state];

    YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:  /* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
    if ( yy_flex_debug )
      {
      if ( yy_act == 0 )
        fprintf( stderr, "--scanner backing up\n" );
      else if ( yy_act < 52 )
        fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
                 (long)yy_rule_linenum[yy_act], yytext );
      else if ( yy_act == 52 )
        fprintf( stderr, "--accepting default rule (\"%s\")\n",
                 yytext );
      else if ( yy_act == 53 )
        fprintf( stderr, "--(end of buffer or a NUL)\n" );
      else
        fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
      }

    switch ( yy_act )
  { /* beginning of action switch */
/* %% [13.0] actions go here */
      case 0: /* must back up */
      /* undo the effects of YY_DO_BEFORE_ACTION */
      *yy_cp = yyg->yy_hold_char;
      yy_cp = yyg->yy_last_accepting_cpos;
      yy_current_state = yyg->yy_last_accepting_state;
      goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 122 "scanner.ll"
loc.step ();
  YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 123 "scanner.ll"
loc.lines (yyleng); loc.step ();
  YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "scanner.ll"
// Comments, skip over. Hint: '.' will not match \n. But location might need fixing.
  YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 125 "scanner.ll"
return yy::Parser::make_QUOTED_STRING  (yytext, loc);  // Will this grab newlines?
  YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "scanner.ll"
return yy::Parser::make_MINUS  (yytext, loc);
  YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 "scanner.ll"
return yy::Parser::make_PLUS   (yytext, loc);
  YY_BREAK
case 7:
YY_RULE_SETUP
#line 128 "scanner.ll"
return yy::Parser::make_STAR   (yytext, loc);
  YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "scanner.ll"
return yy::Parser::make_SLASH  (yytext, loc);
  YY_BREAK
case 9:
YY_RULE_SETUP
#line 130 "scanner.ll"
return yy::Parser::make_LPAREN (yytext, loc);
  YY_BREAK
case 10:
YY_RULE_SETUP
#line 131 "scanner.ll"
return yy::Parser::make_RPAREN (yytext, loc);
  YY_BREAK
case 11:
YY_RULE_SETUP
#line 132 "scanner.ll"
return yy::Parser::make_LBRACKET (yytext, loc);
  YY_BREAK
case 12:
YY_RULE_SETUP
#line 133 "scanner.ll"
return yy::Parser::make_RBRACKET (yytext, loc);
  YY_BREAK
case 13:
YY_RULE_SETUP
#line 134 "scanner.ll"
return yy::Parser::make_LBRACE (yytext, loc);
  YY_BREAK
case 14:
YY_RULE_SETUP
#line 135 "scanner.ll"
return yy::Parser::make_RBRACE (yytext, loc);
  YY_BREAK
case 15:
YY_RULE_SETUP
#line 136 "scanner.ll"
return yy::Parser::make_ASSIGN (yytext, loc);
  YY_BREAK
case 16:
YY_RULE_SETUP
#line 137 "scanner.ll"
return yy::Parser::make_COMMA  (yytext, loc);
  YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "scanner.ll"
return yy::Parser::make_DOLLAR (yytext, loc);
  YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "scanner.ll"
return yy::Parser::make_ALL    (yytext, loc);
  YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "scanner.ll"
return yy::Parser::make_ALSO   (yytext, loc);
  YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "scanner.ll"
return yy::Parser::make_AND    (yytext, loc);
  YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "scanner.ll"
return yy::Parser::make_CLEAR  (yytext, loc);
  YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "scanner.ll"
return yy::Parser::make_CONNECTED (yytext, loc);
  YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "scanner.ll"
return yy::Parser::make_CONTINUE (yytext, loc);
  YY_BREAK
case 24:
YY_RULE_SETUP
#line 145 "scanner.ll"
return yy::Parser::make_DEBUG   (yytext, loc);
  YY_BREAK
case 25:
YY_RULE_SETUP
#line 146 "scanner.ll"
return yy::Parser::make_ELSE   (yytext, loc);
  YY_BREAK
case 26:
YY_RULE_SETUP
#line 147 "scanner.ll"
return yy::Parser::make_ELSEIF (yytext, loc);
  YY_BREAK
case 27:
YY_RULE_SETUP
#line 148 "scanner.ll"
return yy::Parser::make_END    (yytext, loc);
  YY_BREAK
case 28:
YY_RULE_SETUP
#line 149 "scanner.ll"
return yy::Parser::make_EXIT   (yytext, loc);
  YY_BREAK
case 29:
YY_RULE_SETUP
#line 150 "scanner.ll"
return yy::Parser::make_FOR    (yytext, loc);
  YY_BREAK
case 30:
YY_RULE_SETUP
#line 151 "scanner.ll"
return yy::Parser::make_IF     (yytext, loc);
  YY_BREAK
case 31:
YY_RULE_SETUP
#line 152 "scanner.ll"
return yy::Parser::make_NEXT   (yytext, loc);
  YY_BREAK
case 32:
YY_RULE_SETUP
#line 153 "scanner.ll"
return yy::Parser::make_NOT    (yytext, loc);
  YY_BREAK
case 33:
YY_RULE_SETUP
#line 154 "scanner.ll"
return yy::Parser::make_OR     (yytext, loc);
  YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "scanner.ll"
return yy::Parser::make_PRINT  (yytext, loc);
  YY_BREAK
case 35:
YY_RULE_SETUP
#line 156 "scanner.ll"
return yy::Parser::make_RESET  (yytext, loc);
  YY_BREAK
case 36:
YY_RULE_SETUP
#line 157 "scanner.ll"
return yy::Parser::make_STEP   (yytext, loc);
  YY_BREAK
case 37:
YY_RULE_SETUP
#line 158 "scanner.ll"
return yy::Parser::make_THEN   (yytext, loc);
  YY_BREAK
case 38:
YY_RULE_SETUP
#line 159 "scanner.ll"
return yy::Parser::make_TO     (yytext, loc);
  YY_BREAK
case 39:
YY_RULE_SETUP
#line 160 "scanner.ll"
return yy::Parser::make_TRIGGER (yytext, loc);
  YY_BREAK
case 40:
YY_RULE_SETUP
#line 161 "scanner.ll"
return yy::Parser::make_WAIT   (yytext, loc);
  YY_BREAK
case 41:
YY_RULE_SETUP
#line 162 "scanner.ll"
return yy::Parser::make_WHEN   (yytext, loc);
  YY_BREAK
case 42:
YY_RULE_SETUP
#line 164 "scanner.ll"
return yy::Parser::make_NOTE (yytext, loc);
  YY_BREAK
case 43:
YY_RULE_SETUP
#line 165 "scanner.ll"
return make_NUMBER (yytext, loc);
  YY_BREAK
case 44:
YY_RULE_SETUP
#line 166 "scanner.ll"
return yy::Parser::make_ZEROARGFUNC (yytext, loc);
  YY_BREAK
case 45:
YY_RULE_SETUP
#line 167 "scanner.ll"
return yy::Parser::make_ONEARGFUNC (yytext, loc);
  YY_BREAK
case 46:
YY_RULE_SETUP
#line 168 "scanner.ll"
return yy::Parser::make_TWOARGFUNC (yytext, loc);
  YY_BREAK
case 47:
YY_RULE_SETUP
#line 169 "scanner.ll"
return yy::Parser::make_COMPARISON (yytext, loc);
  YY_BREAK
case 48:
YY_RULE_SETUP
#line 170 "scanner.ll"
return yy::Parser::make_IN_PORT (yytext, loc);
  YY_BREAK
case 49:
YY_RULE_SETUP
#line 171 "scanner.ll"
return yy::Parser::make_OUT_PORT (yytext, loc);
  YY_BREAK
case 50:
YY_RULE_SETUP
#line 172 "scanner.ll"
return yy::Parser::make_IDENTIFIER (yytext, loc);
  YY_BREAK
case 51:
YY_RULE_SETUP
#line 173 "scanner.ll"
{
             throw yy::Parser::syntax_error
               (loc, "invalid character: " + std::string(yytext));
}
  YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 177 "scanner.ll"
return yy::Parser::make_YYEOF (loc);
  YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "scanner.ll"
ECHO;
  YY_BREAK
#line 1578 "scanner.cc"

  case YY_END_OF_BUFFER:
    {
    /* Amount of text matched not including the EOB char. */
    int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

    /* Undo the effects of YY_DO_BEFORE_ACTION. */
    *yy_cp = yyg->yy_hold_char;
    YY_RESTORE_YY_MORE_OFFSET

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
      {
      /* We're scanning a new file or input source.  It's
       * possible that this happened because the user
       * just pointed yyin at a new source and called
       * yylex().  If so, then we have to assure
       * consistency between YY_CURRENT_BUFFER and our
       * globals.  Here is the right place to do so, because
       * this is the first action (other than possibly a
       * back-up) that will match for the new input source.
       */
      yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
      YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
      }

    /* Note that here we test for yy_c_buf_p "<=" to the position
     * of the first EOB in the buffer, since yy_c_buf_p will
     * already have been incremented past the NUL character
     * (since all states make transitions on EOB to the
     * end-of-buffer state).  Contrast this with the test
     * in input().
     */
    if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
      { /* This was really a NUL. */
      yy_state_type yy_next_state;

      yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

      yy_current_state = yy_get_previous_state( yyscanner );

      /* Okay, we're now positioned to make the NUL
       * transition.  We couldn't have
       * yy_get_previous_state() go ahead and do it
       * for us because it doesn't know how to deal
       * with the possibility of jamming (and we don't
       * want to build jamming into it because then it
       * will run more slowly).
       */

      yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

      yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

      if ( yy_next_state )
        {
        /* Consume the NUL. */
        yy_cp = ++yyg->yy_c_buf_p;
        yy_current_state = yy_next_state;
        goto yy_match;
        }

      else
        {
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
        yy_cp = yyg->yy_last_accepting_cpos;
        yy_current_state = yyg->yy_last_accepting_state;
        goto yy_find_action;
        }
      }

    else switch ( yy_get_next_buffer( yyscanner ) )
      {
      case EOB_ACT_END_OF_FILE:
        {
        yyg->yy_did_buffer_switch_on_eof = 0;

        if ( yywrap( yyscanner ) )
          {
          /* Note: because we've taken care in
           * yy_get_next_buffer() to have set up
           * yytext, we can now set up
           * yy_c_buf_p so that if some total
           * hoser (like flex itself) wants to
           * call the scanner after we return the
           * YY_NULL, it'll still work - another
           * YY_NULL will get returned.
           */
          yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

          yy_act = YY_STATE_EOF(YY_START);
          goto do_action;
          }

        else
          {
          if ( ! yyg->yy_did_buffer_switch_on_eof )
            YY_NEW_FILE;
          }
        break;
        }

      case EOB_ACT_CONTINUE_SCAN:
        yyg->yy_c_buf_p =
          yyg->yytext_ptr + yy_amount_of_matched_text;

        yy_current_state = yy_get_previous_state( yyscanner );

        yy_cp = yyg->yy_c_buf_p;
        yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        goto yy_match;

      case EOB_ACT_LAST_MATCH:
        yyg->yy_c_buf_p =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

        yy_current_state = yy_get_previous_state( yyscanner );

        yy_cp = yyg->yy_c_buf_p;
        yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        goto yy_find_action;
      }
    break;
    }

  default:
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--no action found" );
  } /* end of action switch */
    } /* end of scanning one token */
  } /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char *source = yyg->yytext_ptr;
  int number_to_move, i;
  int ret_val;

  if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    YY_FATAL_ERROR(
    "fatal flex scanner internal error--end of buffer missed" );

  if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    { /* Don't try to fill the buffer, so this is an EOF. */
    if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
      {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
      }

    else
      {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
      }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

  for ( i = 0; i < number_to_move; ++i )
    *(dest++) = *(source++);

  if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

  else
    {
      int num_to_read =
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
      { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset =
        (int) (yyg->yy_c_buf_p - b->yy_ch_buf);

      if ( b->yy_is_our_buffer )
        {
        int new_size = b->yy_buf_size * 2;

        if ( new_size <= 0 )
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          yyrealloc( (void *) b->yy_ch_buf,
               (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
        }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = NULL;

      if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR(
        "fatal error - scanner input buffer overflow" );

      yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
            number_to_move - 1;

      }

    if ( num_to_read > YY_READ_BUF_SIZE )
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
      yyg->yy_n_chars, num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

  if ( yyg->yy_n_chars == 0 )
    {
    if ( number_to_move == YY_MORE_ADJ )
      {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart( yyin  , yyscanner);
      }

    else
      {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        YY_BUFFER_EOF_PENDING;
      }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
      (void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
      YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    /* "- 2" to take care of EOB's */
    YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
  }

  yyg->yy_n_chars += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
  yy_state_type yy_current_state;
  char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
  yy_current_state = yyg->yy_start;

  for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
    {
/* %% [16.0] code to find the next state goes here */
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if ( yy_accept[yy_current_state] )
      {
      yyg->yy_last_accepting_state = yy_current_state;
      yyg->yy_last_accepting_cpos = yy_cp;
      }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
      {
      yy_current_state = (int) yy_def[yy_current_state];
      if ( yy_current_state >= 201 )
        yy_c = yy_meta[yy_c];
      }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
  int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
  char *yy_cp = yyg->yy_c_buf_p;

  YY_CHAR yy_c = 1;
  if ( yy_accept[yy_current_state] )
    {
    yyg->yy_last_accepting_state = yy_current_state;
    yyg->yy_last_accepting_cpos = yy_cp;
    }
  while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 201 )
      yy_c = yy_meta[yy_c];
    }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  yy_is_jam = (yy_current_state == 200);

  (void)yyg;
  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
  int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  *yyg->yy_c_buf_p = yyg->yy_hold_char;

  if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
    {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
      /* This was really a NUL. */
      *yyg->yy_c_buf_p = '\0';

    else
      { /* need more input */
      int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
      ++yyg->yy_c_buf_p;

      switch ( yy_get_next_buffer( yyscanner ) )
        {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart( yyin , yyscanner);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE:
          {
          if ( yywrap( yyscanner ) )
            return 0;

          if ( ! yyg->yy_did_buffer_switch_on_eof )
            YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput(yyscanner);
#else
          return input(yyscanner);
#endif
          }

        case EOB_ACT_CONTINUE_SCAN:
          yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
          break;
        }
      }
    }

  c = *(unsigned char *) yyg->yy_c_buf_p;  /* cast for 8-bit char's */
  *yyg->yy_c_buf_p = '\0';  /* preserve yytext */
  yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

  return c;
}
/* %if-c-only */
#endif  /* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
    YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
  }

  yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
  yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  /* TODO. We should be able to replace this entire function body
   * with
   *    yypop_buffer_state();
   *    yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack (yyscanner);
  if ( YY_CURRENT_BUFFER == new_buffer )
    return;

  if ( YY_CURRENT_BUFFER )
    {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state( yyscanner );

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
  yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
  YY_BUFFER_STATE b;
    
  b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
  if ( ! b )
    YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
  if ( ! b->yy_ch_buf )
    YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

  b->yy_is_our_buffer = 1;

  yy_init_buffer( b, file , yyscanner);

  return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  if ( ! b )
    return;

  if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if ( b->yy_is_our_buffer )
    yyfree( (void *) b->yy_ch_buf , yyscanner );

  yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
  int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  yy_flush_buffer( b , yyscanner);

/* %if-c-only */
  b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
  b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  if ( ! b )
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if ( b == YY_CURRENT_BUFFER )
    yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack(yyscanner);

  /* This block is copied from yy_switch_to_buffer. */
  if ( YY_CURRENT_BUFFER )
    {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    yyg->yy_buffer_stack_top++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state( yyscanner );
  yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if (yyg->yy_buffer_stack_top > 0)
    --yyg->yy_buffer_stack_top;

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state( yyscanner );
    yyg->yy_did_buffer_switch_on_eof = 1;
  }
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
  yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

  if (!yyg->yy_buffer_stack) {

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
                (num_to_alloc * sizeof(struct yy_buffer_state*)
                , yyscanner);
    if ( ! yyg->yy_buffer_stack )
      YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

    memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    yyg->yy_buffer_stack_max = num_to_alloc;
    yyg->yy_buffer_stack_top = 0;
    return;
  }

  if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

    /* Increase the buffer to prepare for a possible push. */
    yy_size_t grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
                (yyg->yy_buffer_stack,
                num_to_alloc * sizeof(struct yy_buffer_state*)
                , yyscanner);
    if ( ! yyg->yy_buffer_stack )
      YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

    /* zero only the new slots.*/
    memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    yyg->yy_buffer_stack_max = num_to_alloc;
  }
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
  YY_BUFFER_STATE b;
    
  if ( size < 2 ||
       base[size-2] != YY_END_OF_BUFFER_CHAR ||
       base[size-1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
    return NULL;

  b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
  if ( ! b )
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

  b->yy_buf_size = (int) (size - 2);  /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = NULL;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer( b , yyscanner );

  return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
  return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
  YY_BUFFER_STATE b;
  char *buf;
  yy_size_t n;
  int i;
    
  /* Get memory for full buffer, including space for trailing EOB's. */
  n = (yy_size_t) (_yybytes_len + 2);
  buf = (char *) yyalloc( n , yyscanner );
  if ( ! buf )
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

  for ( i = 0; i < _yybytes_len; ++i )
    buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer( buf, n , yyscanner);
  if ( ! b )
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;
  fprintf( stderr, "%s\n", msg );
  exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
  do \
    { \
    /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
    yytext[yyleng] = yyg->yy_hold_char; \
    yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
    yyg->yy_hold_char = *yyg->yy_c_buf_p; \
    *yyg->yy_c_buf_p = '\0'; \
    yyleng = yyless_macro_arg; \
    } \
  while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
  while(YY_CURRENT_BUFFER){
    yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state(yyscanner);
  }

  /* Destroy the stack itself. */
  yyfree(yyg->yy_buffer_stack , yyscanner);
  yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;

  int i;
  for ( i = 0; i < n; ++i )
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
  int n;
  for ( n = 0; s[n]; ++n )
    ;

  return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;
  return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;

  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;
  free( (char *) ptr );  /* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 178 "scanner.ll"


yy::Parser::symbol_type
make_NUMBER (const std::string &s, const yy::Parser::location_type& loc) {
  errno = 0;
  float n = strtof(s.c_str(), NULL);
  return yy::Parser::make_NUMBER (n, loc);
}

int
Driver::set_text(const std::string &text) {
  yyscan_t scanner;

  yylex_init(&scanner);
  yy::location* loc = new yy::location();
  // yy_flex_debug = trace_scanning;
  // Creates a buffer from the string.
  YY_BUFFER_STATE input_buffer = yy_scan_string(text.c_str(), scanner);
  // Tell Flex to use this buffer.
  yy_switch_to_buffer(input_buffer, scanner);

  yy::Parser the_parser(*this, scanner, *loc);
  the_parser.set_debug_level(trace_parsing);
  int res = the_parser.parse();
  yy_delete_buffer(input_buffer, scanner);  // Free the buffer
  yylex_destroy(scanner);
  delete loc;
  return res;
}

